package cn.xgs.mapper.system;

import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import cn.xgs.domain.dto.SysRole;
import org.apache.ibatis.annotations.Param;

import java.util.List;

public interface SysRoleMapper extends BaseMapper<SysRole> {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_role
     *
     * @mbg.generated Wed Sep 18 22:51:36 CST 2024
     */
    int deleteByPrimaryKey(Long roleId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_role
     *
     * @mbg.generated Wed Sep 18 22:51:36 CST 2024
     */
    int insert(SysRole row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_role
     *
     * @mbg.generated Wed Sep 18 22:51:36 CST 2024
     */
    SysRole selectByPrimaryKey(Long roleId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_role
     *
     * @mbg.generated Wed Sep 18 22:51:36 CST 2024
     */
    List<SysRole> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_role
     *
     * @mbg.generated Wed Sep 18 22:51:36 CST 2024
     */
    int updateByPrimaryKey(SysRole row);
    /**
     * 新增角色信息
     *
     * @param role 角色信息
     * @return 结果
     */
    public int insertRole(SysRole role);

    /**
     * 根据条件分页查询角色数据
     *
     * @param role 角色信息
     * @return 角色数据集合信息
     */
    public List<SysRole> selectRoleList(SysRole role);

    /**
     * 根据用户ID查询角色
     *
     * @param userId 用户ID
     * @return 角色列表
     */
    public List<SysRole> selectRolePermissionByUserId(Long userId);

    /**
     * 通过角色ID查询角色
     *
     * @param roleId 角色ID
     * @return 角色对象信息
     */
    public SysRole selectRoleById(Long roleId);

    /**
     * 通过角色key查询角色
     *
     * @param roleKey 角色key
     * @return 角色对象信息
     */
    public SysRole selectRoleByRoleKey(String roleKey);

    /**
     * 校验角色名称是否唯一
     *
     * @param roleName 角色名称
     * @return 角色信息
     */
    public SysRole checkRoleNameUnique(String roleName);

    /**
     * 校验角色权限是否唯一
     *
     * @param roleKey 角色权限
     * @return 角色信息
     */
    public SysRole checkRoleKeyUnique(String roleKey);

    /**
     * 修改角色信息
     *
     * @param role 角色信息
     * @return 结果
     */
    public int updateRole(SysRole role);

    /**
     * 批量删除角色信息
     *
     * @param roleIds 需要删除的角色ID
     * @return 结果
     */
    public int deleteRoleByIds(Long[] roleIds);

    /**
     * 通过角色角色权限查询角色id
     *
     * @param roleKey 角色权限
     * @return 角色对象信息
     */
    public Long selectRoleIdByRoleKey(String roleKey);

    /**
     * 查询启用角色
     * @param role 条件
     * @return 结果
     */
    List<SysRole> selectRoleListOfEnable(SysRole role);

    /**
     * 根据ID查询所有子角色（正常状态）
     *
     * @param roleId 角色ID
     * @return 子角色数
     */
    int selectNormalChildrenRoleById(Long roleId);

    /**
     * 是否存在子节点
     * @param roleId 角色id
     * @return 结果
     */
    int hasChildByRoleId(Long roleId);

    /**
     * 获取父角色和子角色id
     * @param parentId 父角色id
     * @return id集合
     */
    List<String> selectRoleIdsByParentId(Long parentId);

    /**
     * 根据ID查询所有子角色
     *
     * @param roleId 角色ID
     * @return 角色列表
     */
    List<SysRole> selectChildrenRoleById(Long roleId);

    /**
     * 修改子元素关系
     *
     * @param roles 子元素
     * @return 结果
     */
    public int updateRoleChildren(@Param("roles") List<SysRole> roles);

    /**
     * 修改所在部门正常状态
     *
     * @param roleIds 角色ID组
     */
    void updateRoleStatusNormal(Long[] roleIds);
}